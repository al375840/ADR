---
import '../../public/styles/global.css'; // Adjust the path if necessary
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Grid con Estilos Aplicados Correctamente</title>
    <!-- Import the 'Press Start 2P' font from Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="container"></div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const container = document.getElementById('container');
        let numCols, numRows;
        let occupiedPositions = [];
        let textSquares = [];
        let totalContentHeight = 0;

        const texts = [
          {
            content: "ADRIAN",
          },
          {
            content: "IT ENGINEER",
          },
        ];

        const cards = [
          {
            content: 'Este es el texto de la primera tarjeta.',
            width: 10,
            height: 4,
          },
        ];

        const images = [
          {
            src: '/images/portrait.png', // Ensure the path is correct
            alt: 'Descripción de la imagen',
            width: 5,
            height: 8,
          },
        ];

        function generateSquares() {
          if (!container) {
            throw new Error("El elemento 'container' no se encontró en el DOM.");
          }

          container.innerHTML = ''; // Clear existing squares

          const minSize = 60; // Minimum size of squares

          const availableWidth = window.innerWidth;
          const availableHeight = window.innerHeight;

          // Calculate the number of columns and rows based on the minimum size
          numCols = Math.floor(availableWidth / minSize);
          numRows = Math.floor(availableHeight / minSize);

          // Set up the grid to have the correct number of columns
          container.style.display = 'grid';
          container.style.width = '100vw';
          container.style.height = '100vh';
          container.style.gridTemplateColumns = `repeat(${numCols}, 1fr)`;
          container.style.gridAutoRows = `minmax(${minSize}px, 1fr)`;

          occupiedPositions = [];
          textSquares = [];

          calculateTotalContentHeight();
          createTextElements();
          createCardElements();
          createImageElements();
          generateGridSquares();
        }

        function calculateTotalContentHeight() {
          totalContentHeight = 0;

          // Texts occupy one row each
          totalContentHeight += texts.length;

          // Add the heights of cards and images
          cards.forEach((card) => {
            totalContentHeight += card.height;
          });

          images.forEach((image) => {
            totalContentHeight += image.height;
          });

          // Add spaces between elements
          const spacesBetweenElements = texts.length + cards.length + images.length - 1;
          totalContentHeight += spacesBetweenElements;
        }

        function createTextElements() {
          let currentRow = Math.floor((numRows - totalContentHeight) / 2) + 1;
          currentRow = Math.max(currentRow, 1);

          texts.forEach((textItem) => {
            const { content } = textItem;

            // Calculate starting column to center the text
            const textLength = content.replace(/\s/g, '').length;
            let startCol = Math.floor((numCols - textLength) / 2) + 1;
            startCol = Math.max(startCol, 1);

            textItem.row = currentRow;
            textItem.col = startCol;

            let currentCol = startCol;

            for (let i = 0; i < content.length; i++) {
              const char = content[i];
              if (char !== ' ') {
                occupiedPositions.push({ row: currentRow, col: currentCol });
                textSquares.push({ row: currentRow, col: currentCol, letter: char });
                currentCol++;
              } else {
                currentCol++;
              }
            }

            currentRow += 1; // Move to the next row for the next text
          });
        }

        function createCardElements() {
          let currentRow = texts[texts.length - 1].row + 1; // One row after the last text

          cards.forEach((cardItem) => {
            const { width, height } = cardItem;

            // Center the card horizontally
            let startCol = Math.floor((numCols - width) / 2) + 1;
            startCol = Math.max(startCol, 1);

            cardItem.row = currentRow;
            cardItem.col = startCol;

            const endRow = currentRow + height - 1;
            const endCol = startCol + width - 1;

            // Mark positions as occupied
            for (let r = currentRow; r <= endRow; r++) {
              for (let c = startCol; c <= endCol; c++) {
                occupiedPositions.push({ row: r, col: c });
              }
            }

            createCard(cardItem);

            currentRow = endRow + 1; // Move to the next row after the card
          });
        }

        function createImageElements() {
          let currentRow = cards.length
            ? cards[cards.length - 1].row + cards[cards.length - 1].height + 1
            : texts[texts.length - 1].row + 1;

          images.forEach((imageItem) => {
            const { width, height } = imageItem;

            // Center the image horizontally
            let startCol = Math.floor((numCols - width) / 2) + 1;
            startCol = Math.max(startCol, 1);

            imageItem.row = currentRow;
            imageItem.col = startCol;

            const endRow = currentRow + height - 1;
            const endCol = startCol + width - 1;

            // Mark positions as occupied
            for (let r = currentRow; r <= endRow; r++) {
              for (let c = startCol; c <= endCol; c++) {
                occupiedPositions.push({ row: r, col: c });
              }
            }

            createImage(imageItem);

            currentRow = endRow + 1; // Move to the next row after the image
          });
        }

        function createCard(cardData) {
          const { content, row, col, width, height } = cardData;

          const card = document.createElement('div');
          card.className = 'card';

          card.style.gridRow = `${row} / ${row + height}`;
          card.style.gridColumn = `${col} / ${col + width}`;

          card.innerHTML = `<p>${content}</p>`;

          container.appendChild(card);
        }

        function createImage(imageData) {
          const { src, alt, row, col, width, height } = imageData;

          const imgWrapper = document.createElement('div');
          imgWrapper.className = 'image-wrapper';

          imgWrapper.style.gridRow = `${row} / ${row + height}`;
          imgWrapper.style.gridColumn = `${col} / ${col + width}`;

          const img = document.createElement('img');
          img.src = src;
          img.alt = alt;
          img.style.width = '100%';
          img.style.height = '100%';
          img.style.objectFit = 'cover';

          imgWrapper.appendChild(img);
          container.appendChild(imgWrapper);
        }

        function generateGridSquares() {
          const totalPositions = [];
          for (let row = 1; row <= numRows; row++) {
            for (let col = 1; col <= numCols; col++) {
              const isOccupied = occupiedPositions.some(
                (item) => item.row === row && item.col === col
              );
              if (!isOccupied) {
                totalPositions.push({ row, col });
              }
            }
          }

          shuffle(totalPositions);

          const numLighterSquares = Math.floor(totalPositions.length * 0.3);
          const lighterPositions = totalPositions.slice(0, numLighterSquares);

          for (let row = 1; row <= numRows; row++) {
            for (let col = 1; col <= numCols; col++) {
              const square = document.createElement('div');
              square.className = 'square';

              square.classList.add(`row-${row}`, `col-${col}`);

              const textSquare = textSquares.find(
                (item) => item.row === row && item.col === col
              );

              if (textSquare) {
                square.textContent = textSquare.letter;
                square.classList.add('text-square');
              } else {
                const isLighter = lighterPositions.some(
                  (pos) => pos.row === row && pos.col === col
                );

                if (isLighter) {
                  square.classList.add('lighter');
                }
              }

              container.appendChild(square);
            }
          }
        }

        function shuffle(array) {
          for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
          }
        }

        window.addEventListener('resize', generateSquares);
        generateSquares();
      });
    </script>
  </body>
</html>
