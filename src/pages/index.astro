---
---
<style>
  /* Importar la fuente 'Press Start 2P' desde Google Fonts */
  @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

  /* Reiniciar estilos predeterminados */
  :global(*) {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  /* Estilos globales para body y html */
  :global(body, html) {
    height: 100%;
    overflow: hidden; /* Evita scrollbars */
    font-family: 'Press Start 2P', cursive; /* Fuente pixelada retro */
  }

  /* Estilos para el contenedor */
  :global(#container) {
    display: grid;
    width: 100vw;
    height: 100vh;
    background-color: #f5f5f5; /* Fondo en tono claro */
    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    grid-auto-rows: minmax(60px, 1fr); /* Asegura que las filas sean cuadradas */
  }

  /* Estilos para los cuadrados */
  :global(.square) {
    background-color: #2c3e50; /* Color oscuro por defecto */
    transition: background-color 3s ease;
    width: 100%;
    height: 100%;
  }

  /* Estilos para los cuadrados 'lighter' */
  :global(.square.lighter) {
    background-color: #34495e; /* Color más claro */
  }

  /* Efecto hover para todos los cuadrados (excepto los de texto) */
  :global(.square:not(.text-square):hover) {
    background-color: #ecf0f1; /* Color claro al hacer hover */
    transition-duration: 0.05s;
  }

  /* Estilos específicos para los cuadrados con texto */
  :global(.square.text-square) {
    background-color: #ecf0f1; /* Fondo claro */
    color: #2c3e50; /* Texto en color oscuro */
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1em;
    font-weight: normal;
    font-family: 'Press Start 2P', cursive;
    text-align: center;
  }

  /* Desactivar el efecto hover en los cuadrados con texto */
  :global(.square.text-square:hover) {
    background-color: #ecf0f1;
  }

  /* Estilos para la tarjeta */
  :global(.card) {
    background-color: #ecf0f1; /* Fondo claro */
    color: #2c3e50; /* Texto en color oscuro */
    padding: 20px;
    box-sizing: border-box;
    overflow: auto;
    z-index: 1; /* Asegura que la tarjeta esté encima de los cuadrados */
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
</style>

<div id="container"></div>

<script>
  function generateSquares() {
    const container = document.getElementById('container');
    container.innerHTML = ''; // Limpia los cuadrados existentes

    const minSize = 60; // Tamaño mínimo de los cuadrados

    const availableWidth = window.innerWidth;
    const availableHeight = window.innerHeight;

    // Calcula el número de columnas y filas basándose en el tamaño mínimo
    const numCols = Math.floor(availableWidth / minSize);
    const numRows = Math.floor(availableHeight / minSize);

    // Ajusta el grid para que tenga el número correcto de columnas
    container.style.gridTemplateColumns = `repeat(${numCols}, 1fr)`;
    container.style.gridAutoRows = `minmax(${minSize}px, 1fr)`;

    // Definir las posiciones y letras para los cuadrados con texto
    const textSquares = [
      { row: 3, col: 4, letter: 'A' },
      { row: 3, col: 5, letter: 'D' },
      { row: 3, col: 6, letter: 'R' },
      { row: 3, col: 7, letter: 'I' },
      { row: 3, col: 8, letter: 'A' },
      { row: 3, col: 9, letter: 'N' },
            { row: 5, col: 4, letter: 'IT' },
      { row: 5, col: 6, letter: 'I' },
      { row: 5, col: 7, letter: 'N' },
      { row: 5, col: 8, letter: 'G' },
      { row: 5, col: 9, letter: 'I' },
      { row: 5, col: 10, letter: 'N' },
      { row: 5, col: 11, letter: 'E' },
      { row: 5, col: 12, letter: 'E' },
      { row: 5, col: 13, letter: 'R' },
    ];

    const totalPositions = [];

    // Genera un array con todas las posiciones de los cuadrados que no tienen texto
    for (let row = 1; row <= numRows; row++) {
      for (let col = 1; col <= numCols; col++) {
        // Excluye los cuadrados con texto
        const isTextSquare = textSquares.some(
          (item) => item.row === row && item.col === col
        );
        if (!isTextSquare) {
          totalPositions.push({ row, col });
        }
      }
    }

    // Mezcla el array de posiciones de forma aleatoria
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }

    shuffle(totalPositions);

    // Calcula el número de cuadrados que serán más claros (30% de los cuadrados sin texto)
    const numLighterSquares = Math.floor(totalPositions.length * 0.3);

    // Asigna las clases 'lighter' a los cuadrados correspondientes
    const lighterPositions = totalPositions.slice(0, numLighterSquares);

    // Genera los cuadrados en orden, asignando las clases correspondientes
    for (let row = 1; row <= numRows; row++) {
      for (let col = 1; col <= numCols; col++) {
        const square = document.createElement('div');
        square.className = 'square';

        // Añade clases para identificar la fila y columna
        square.classList.add(`row-${row}`, `col-${col}`);

        // Verifica si el cuadrado actual es uno de los que tiene texto
        const textSquare = textSquares.find(
          (item) => item.row === row && item.col === col
        );

        if (textSquare) {
          square.textContent = textSquare.letter;
          square.classList.add('text-square');
        } else {
          // Asigna la clase 'lighter' si corresponde
          const isLighter = lighterPositions.some(
            (pos) => pos.row === row && pos.col === col
          );

          if (isLighter) {
            square.classList.add('lighter');
          }
        }

        container.appendChild(square);
      }
    }

    // Crear tarjetas de forma automatizada
    const cards = [
      {
        text: 'Este es el texto de la primera tarjeta.',
        startRow: 7,
        startCol: 4,
        endRow: 10,
        endCol: 13,
      },
      // Puedes añadir más tarjetas aquí
      // {
      //   text: 'Otra tarjeta.',
      //   startRow: ...,
      //   startCol: ...,
      //   endRow: ...,
      //   endCol: ...,
      // },
    ];

    // Función para crear una tarjeta
    function createCard({ text, startRow, startCol, endRow, endCol, ...attrs }) {
      const card = document.createElement('div');
      card.className = 'card';

      // Configurar las posiciones en la cuadrícula
      card.style.gridRow = `${startRow} / ${endRow + 1}`;
      card.style.gridColumn = `${startCol} / ${endCol + 1}`;

      // Añadir atributos adicionales si se proporcionan
      for (const [key, value] of Object.entries(attrs)) {
        card.setAttribute(key, value);
      }

      // Añadir el texto
      card.innerHTML = `<p>${text}</p>`;

      container.appendChild(card);
    }

    // Crear las tarjetas definidas en el array 'cards'
    for (const cardData of cards) {
      createCard(cardData);
    }
  }

  // Genera los cuadrados al cargar la página y al cambiar el tamaño de la ventana
  window.addEventListener('load', generateSquares);
  window.addEventListener('resize', generateSquares);
</script>
