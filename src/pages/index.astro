---
import '../../public/styles/global.css'; // Ajusta la ruta si es necesario
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Portfolio Adrián</title>
    <!-- Importar la fuente 'Press Start 2P' desde Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="container"></div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const container = document.getElementById('container');
        let numCols, numRows;
        let occupiedPositions = [];
        let currentPage = 0;

        // Página 1: Elementos originales
        const page1 = {
          images: [{ src: '/images/portrait.png', alt: 'Descripción de la imagen', width: 5, height: 8, col: 2, row: 2 }],
          texts: [
            { content: 'ADRIAN', col: 2, row: 2 },
            { content: 'IT ENGINEER', col: 2, row: 4 },
          ],
          cards: [{ content: 'Este es el texto de la primera tarjeta.', width: 10, height: 4, col: 2, row: 11 }],
        };

        // Página 2: Personalizable
        const page2 = {
          images: [{ src: '/images/portrait.png', alt: 'Descripción de la imagen', width: 5, height: 8, col: 4, row: 4 }],
          texts: [
            { content: 'ADRIAN', col: 4, row: 6 },
            { content: 'ENGINEER', col: 6, row: 8 },
          ],
          cards: [{ content: 'Otra tarjeta diferente.', width: 8, height: 4, col: 4, row: 12 }],
        };

        function initGrid() {
          container.innerHTML = '';
          numCols = Math.floor(window.innerWidth / 60);
          numRows = Math.floor(window.innerHeight / 60);

          container.style.display = 'grid';
          container.style.gridTemplateColumns = `repeat(${numCols}, 1fr)`;
          container.style.gridAutoRows = `60px`;
          occupiedPositions = [];

          generateGridSquares();
          const currentConfig = currentPage === 0 ? page1 : page2;
          renderCards(currentConfig.cards);
          renderImages(currentConfig.images);
          renderTextSquares(currentConfig.texts);
        }

        function markOccupied(row, col) {
          occupiedPositions.push(`${row}-${col}`);
        }

        function generateGridSquares() {
          const totalSquares = [];
          for (let row = 1; row <= numRows; row++) {
            for (let col = 1; col <= numCols; col++) {
              totalSquares.push(`${row}-${col}`);
            }
          }

          const lighterCount = Math.floor(totalSquares.length * 0.3);
          const lighterSquares = new Set();

          while (lighterSquares.size < lighterCount) {
            const randomIndex = Math.floor(Math.random() * totalSquares.length);
            lighterSquares.add(totalSquares[randomIndex]);
          }

          for (let row = 1; row <= numRows; row++) {
            for (let col = 1; col <= numCols; col++) {
              const square = document.createElement('div');
              square.className = 'square';
              const position = `${row}-${col}`;
              if (lighterSquares.has(position)) {
                square.classList.add('lighter');
              }
              container.appendChild(square);
            }
          }
        }

        function renderCards(cards) {
          cards.forEach(({ content, width, height, col, row }) => {
            const card = document.createElement('div');
            card.className = 'card';
            card.style.gridColumn = `${col} / span ${width}`;
            card.style.gridRow = `${row} / span ${height}`;
            card.innerHTML = `<p>${content}</p>`;
            container.appendChild(card);
            markOccupied(row, col);
          });
        }

        function renderImages(images) {
          images.forEach(({ src, alt, width, height, col, row }) => {
            const imgWrapper = document.createElement('div');
            imgWrapper.className = 'image-wrapper';
            imgWrapper.style.gridColumn = `${col} / span ${width}`;
            imgWrapper.style.gridRow = `${row} / span ${height}`;

            const img = document.createElement('img');
            img.src = src;
            img.alt = alt;
            img.style.width = '100%';
            img.style.height = '100%';
            img.style.objectFit = 'cover';

            imgWrapper.appendChild(img);
            container.appendChild(imgWrapper);
            markOccupied(row, col);
          });
        }

        function renderTextSquares(texts) {
          texts.forEach(({ content, col, row }) => {
            let currentCol = col;
            for (const char of content) {
              if (char !== ' ') {
                const square = document.createElement('div');
                square.className = 'square text-square';
                square.textContent = char;
                square.style.gridColumn = currentCol;
                square.style.gridRow = row;
                container.appendChild(square);
                markOccupied(row, currentCol);
              }
              currentCol++;
            }
          });
        }

        window.addEventListener('resize', initGrid);
        document.addEventListener('click', () => {
          currentPage = (currentPage + 1) % 2;
          initGrid();
        });
        initGrid();
      });
    </script>
  </body>
</html>
